{
  "context": {
    "_fileIds": {
      "WORKFLOW-INVALID.YML": 1
    },
    "_fileNames": [
      "workflow-invalid.yml"
    ],
    "expressionFunctions": [],
    "expressionNamedContexts": [],
    "state": {},
    "errors": {
      "_errors": [
        {
          "rawMessage": "A block sequence may not be used as an implicit map key at line 20, column 1:\n\n      - run: npm run build\r\n    - run: npm test\n^\n",
          "prefix": "workflow-invalid.yml",
          "range": {
            "start": {
              "line": 20,
              "column": 1
            },
            "end": {
              "line": 20,
              "column": 2
            }
          }
        },
        {
          "rawMessage": "Implicit keys need to be on a single line at line 20, column 5:\n\n      - run: npm run build\r\n    - run: npm test\n    ^\n",
          "prefix": "workflow-invalid.yml",
          "range": {
            "start": {
              "line": 20,
              "column": 5
            },
            "end": {
              "line": 20,
              "column": 6
            }
          }
        },
        {
          "rawMessage": "Nested mappings are not allowed in compact mappings at line 20, column 12:\n\n    - run: npm test\n           ^\n",
          "prefix": "workflow-invalid.yml",
          "range": {
            "start": {
              "line": 20,
              "column": 12
            },
            "end": {
              "line": 20,
              "column": 13
            }
          }
        },
        {
          "rawMessage": "Implicit keys need to be on a single line at line 20, column 12:\n\n    - run: npm test\n           ^\n",
          "prefix": "workflow-invalid.yml",
          "range": {
            "start": {
              "line": 20,
              "column": 12
            },
            "end": {
              "line": 21,
              "column": 12
            }
          }
        },
        {
          "rawMessage": "Implicit map keys need to be followed by map values at line 20, column 5:\n\n      - run: npm run build\r\n    - run: npm test\n    ^\n",
          "prefix": "workflow-invalid.yml",
          "range": {
            "start": {
              "line": 20,
              "column": 5
            },
            "end": {
              "line": 23,
              "column": 1
            }
          }
        }
      ],
      "_maxErrors": 0,
      "_maxMessageLength": 0
    },
    "schema": {
      "definitions": {
        "null": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "null"
        },
        "boolean": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "boolean"
        },
        "number": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "number"
        },
        "string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "string",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "sequence": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "sequence",
          "itemType": "any"
        },
        "mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "mapping",
          "properties": {},
          "looseKeyType": "string",
          "looseValueType": "any"
        },
        "any": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "any",
          "oneOf": [
            "null",
            "boolean",
            "number",
            "string",
            "sequence",
            "mapping"
          ],
          "oneOfPrefix": []
        },
        "workflow-root": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-root",
          "description": "A workflow file.",
          "properties": {
            "on": {
              "type": "on",
              "required": false
            },
            "name": {
              "type": "workflow-name",
              "required": false
            },
            "run-name": {
              "type": "run-name",
              "required": false
            },
            "defaults": {
              "type": "workflow-defaults",
              "required": false
            },
            "env": {
              "type": "workflow-env",
              "required": false
            },
            "permissions": {
              "type": "permissions",
              "required": false
            },
            "concurrency": {
              "type": "workflow-concurrency",
              "required": false
            },
            "jobs": {
              "type": "jobs",
              "required": true
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-root-strict": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-root-strict",
          "description": "Workflow file with strict validation",
          "properties": {
            "on": {
              "type": "on-strict",
              "required": true
            },
            "name": {
              "type": "workflow-name",
              "required": false
            },
            "run-name": {
              "type": "run-name",
              "required": false
            },
            "defaults": {
              "type": "workflow-defaults",
              "required": false
            },
            "env": {
              "type": "workflow-env",
              "required": false
            },
            "permissions": {
              "type": "permissions",
              "required": false
            },
            "concurrency": {
              "type": "workflow-concurrency",
              "required": false
            },
            "jobs": {
              "type": "jobs",
              "required": true
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-name": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-name",
          "description": "The name of the workflow that GitHub displays on your repository's 'Actions' tab.\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#name)",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "run-name": {
          "readerContext": [
            "github",
            "inputs",
            "vars"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars"
          ],
          "key": "run-name",
          "description": "The name for workflow runs generated from the workflow. GitHub displays the workflow run name in the list of workflow runs on your repository's 'Actions' tab.\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#run-name)",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "on": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "on",
          "description": "The GitHub event that triggers the workflow. Events can be a single string, array of events, array of event types, or an event configuration map that schedules a workflow or restricts the execution of a workflow to specific files, tags, or branch changes. View a full list of [events that trigger workflows](https://docs.github.com/actions/using-workflows/events-that-trigger-workflows).\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#on)",
          "oneOf": [
            "string",
            "sequence",
            "on-mapping"
          ],
          "oneOfPrefix": []
        },
        "on-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "on-mapping",
          "properties": {
            "workflow_call": {
              "type": "workflow-call",
              "required": false
            }
          },
          "looseKeyType": "non-empty-string",
          "looseValueType": "any"
        },
        "on-strict": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "on-strict",
          "description": "The GitHub event that triggers the workflow.  Events can be a single string, array of events, array of event types, or an event configuration map that schedules a workflow or restricts the execution of a workflow to specific files, tags, or branch changes. View a full list of [events that trigger workflows](https://docs.github.com/actions/using-workflows/events-that-trigger-workflows).\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#on)",
          "oneOf": [
            "on-string-strict",
            "on-sequence-strict",
            "on-mapping-strict"
          ],
          "oneOfPrefix": []
        },
        "on-mapping-strict": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "on-mapping-strict",
          "description": "The GitHub event that triggers the workflow.  Events can be a single string, array of events, array of event types, or an event configuration map that schedules a workflow or restricts the execution of a workflow to specific files, tags, or branch changes. View a full list of [events that trigger workflows](https://docs.github.com/actions/using-workflows/events-that-trigger-workflows).\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#on)",
          "properties": {
            "branch_protection_rule": {
              "type": "branch-protection-rule",
              "required": false
            },
            "check_run": {
              "type": "check-run",
              "required": false
            },
            "check_suite": {
              "type": "check-suite",
              "required": false
            },
            "create": {
              "type": "create",
              "required": false
            },
            "delete": {
              "type": "delete",
              "required": false
            },
            "deployment": {
              "type": "deployment",
              "required": false
            },
            "deployment_status": {
              "type": "deployment-status",
              "required": false
            },
            "discussion": {
              "type": "discussion",
              "required": false
            },
            "discussion_comment": {
              "type": "discussion-comment",
              "required": false
            },
            "fork": {
              "type": "fork",
              "required": false
            },
            "gollum": {
              "type": "gollum",
              "required": false
            },
            "issue_comment": {
              "type": "issue-comment",
              "required": false
            },
            "issues": {
              "type": "issues",
              "required": false
            },
            "label": {
              "type": "label",
              "required": false
            },
            "merge_group": {
              "type": "merge-group",
              "required": false
            },
            "milestone": {
              "type": "milestone",
              "required": false
            },
            "page_build": {
              "type": "page-build",
              "required": false
            },
            "project": {
              "type": "project",
              "required": false
            },
            "project_card": {
              "type": "project-card",
              "required": false
            },
            "project_column": {
              "type": "project-column",
              "required": false
            },
            "public": {
              "type": "public",
              "required": false
            },
            "pull_request": {
              "type": "pull-request",
              "required": false
            },
            "pull_request_comment": {
              "type": "pull-request-comment",
              "required": false
            },
            "pull_request_review": {
              "type": "pull-request-review",
              "required": false
            },
            "pull_request_review_comment": {
              "type": "pull-request-review-comment",
              "required": false
            },
            "pull_request_target": {
              "type": "pull-request-target",
              "required": false
            },
            "push": {
              "type": "push",
              "required": false
            },
            "registry_package": {
              "type": "registry-package",
              "required": false
            },
            "release": {
              "type": "release",
              "required": false
            },
            "repository_dispatch": {
              "type": "repository-dispatch",
              "required": false
            },
            "schedule": {
              "type": "schedule",
              "required": false
            },
            "status": {
              "type": "status",
              "required": false
            },
            "watch": {
              "type": "watch",
              "required": false
            },
            "workflow_call": {
              "type": "workflow-call",
              "required": false
            },
            "workflow_dispatch": {
              "type": "workflow-dispatch",
              "required": false
            },
            "workflow_run": {
              "type": "workflow-run",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "on-string-strict": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "on-string-strict",
          "oneOf": [
            "branch-protection-rule-string",
            "check-run-string",
            "check-suite-string",
            "create-string",
            "delete-string",
            "deployment-string",
            "deployment-status-string",
            "discussion-string",
            "discussion-comment-string",
            "fork-string",
            "gollum-string",
            "issue-comment-string",
            "issues-string",
            "label-string",
            "merge-group-string",
            "milestone-string",
            "page-build-string",
            "project-string",
            "project-card-string",
            "project-column-string",
            "public-string",
            "pull-request-string",
            "pull-request-comment-string",
            "pull-request-review-string",
            "pull-request-review-comment-string",
            "pull-request-target-string",
            "push-string",
            "registry-package-string",
            "release-string",
            "repository-dispatch-string",
            "schedule-string",
            "status-string",
            "watch-string",
            "workflow-call-string",
            "workflow-dispatch-string",
            "workflow-run-string"
          ],
          "oneOfPrefix": []
        },
        "on-sequence-strict": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "on-sequence-strict",
          "itemType": "on-string-strict"
        },
        "branch-protection-rule-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "branch-protection-rule-string",
          "description": "Runs your workflow when branch protection rules in the workflow repository are changed.",
          "constant": "branch_protection_rule",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "branch-protection-rule": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "branch-protection-rule",
          "description": "Runs your workflow when branch protection rules in the workflow repository are changed.",
          "oneOf": [
            "null",
            "branch-protection-rule-mapping"
          ],
          "oneOfPrefix": []
        },
        "branch-protection-rule-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "branch-protection-rule-mapping",
          "properties": {
            "types": {
              "type": "branch-protection-rule-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "branch-protection-rule-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "branch-protection-rule-activity",
          "description": "The types of branch protection rule activity that trigger the workflow. Supported activity types: `created`, `edited`, `deleted`.",
          "oneOf": [
            "branch-protection-rule-activity-type",
            "branch-protection-rule-activity-types"
          ],
          "oneOfPrefix": []
        },
        "branch-protection-rule-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "branch-protection-rule-activity-types",
          "itemType": "branch-protection-rule-activity-type"
        },
        "branch-protection-rule-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "branch-protection-rule-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "branch-protection-rule-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "branch-protection-rule-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "branch-protection-rule-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "branch-protection-rule-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "branch-protection-rule-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "branch-protection-rule-activity-type",
          "oneOf": [
            "branch-protection-rule-activity-type-created",
            "branch-protection-rule-activity-type-edited",
            "branch-protection-rule-activity-type-deleted"
          ],
          "oneOfPrefix": []
        },
        "check-run-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run-string",
          "description": "Runs your workflow when activity related to a check run occurs. A check run is an individual test that is part of a check suite.",
          "constant": "check_run",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "check-run": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run",
          "description": "Runs your workflow when activity related to a check run occurs. A check run is an individual test that is part of a check suite.",
          "oneOf": [
            "null",
            "check-run-mapping"
          ],
          "oneOfPrefix": []
        },
        "check-run-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run-mapping",
          "properties": {
            "types": {
              "type": "check-run-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "check-run-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run-activity",
          "description": "The types of check run activity that trigger the workflow. Supported activity types: `created`, `rerequested`, `completed`, `requested_action`.",
          "oneOf": [
            "check-run-activity-type",
            "check-run-activity-types"
          ],
          "oneOfPrefix": []
        },
        "check-run-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run-activity-types",
          "itemType": "check-run-activity-type"
        },
        "check-run-activity-type-completed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run-activity-type-completed",
          "constant": "completed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "check-run-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "check-run-activity-type-rerequested": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run-activity-type-rerequested",
          "constant": "rerequested",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "check-run-activity-type-requested_action": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run-activity-type-requested_action",
          "constant": "requested_action",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "check-run-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-run-activity-type",
          "oneOf": [
            "check-run-activity-type-completed",
            "check-run-activity-type-created",
            "check-run-activity-type-rerequested",
            "check-run-activity-type-requested_action"
          ],
          "oneOfPrefix": []
        },
        "check-suite-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-suite-string",
          "description": "Runs your workflow when check suite activity occurs. A check suite is a collection of the check runs created for a specific commit. Check suites summarize the status and conclusion of the check runs that are in the suite.",
          "constant": "check_suite",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "check-suite": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-suite",
          "description": "Runs your workflow when check suite activity occurs. A check suite is a collection of the check runs created for a specific commit. Check suites summarize the status and conclusion of the check runs that are in the suite.",
          "oneOf": [
            "null",
            "check-suite-mapping"
          ],
          "oneOfPrefix": []
        },
        "check-suite-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-suite-mapping",
          "properties": {
            "types": {
              "type": "check-suite-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "check-suite-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-suite-activity",
          "description": "The types of check suite activity that trigger the workflow. Supported activity types: `completed`.",
          "oneOf": [
            "check-suite-activity-type",
            "check-suite-activity-types"
          ],
          "oneOfPrefix": []
        },
        "check-suite-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-suite-activity-types",
          "itemType": "check-suite-activity-type"
        },
        "check-suite-activity-type-completed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-suite-activity-type-completed",
          "constant": "completed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "check-suite-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "check-suite-activity-type",
          "oneOf": [
            "check-suite-activity-type-completed"
          ],
          "oneOfPrefix": []
        },
        "create-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "create-string",
          "description": "Runs your workflow when someone creates a Git reference (Git branch or tag) in the workflow's repository.",
          "constant": "create",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "create": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "create",
          "description": "Runs your workflow when someone creates a Git reference (Git branch or tag) in the workflow's repository."
        },
        "delete-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "delete-string",
          "description": "Runs your workflow when someone deletes a Git reference (Git branch or tag) in the workflow's repository.",
          "constant": "delete",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "delete": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "delete",
          "description": "Runs your workflow when someone deletes a Git reference (Git branch or tag) in the workflow's repository."
        },
        "deployment-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "deployment-string",
          "description": "Runs your workflow when someone creates a deployment in the workflow's repository. Deployments created with a commit SHA may not have a Git ref.",
          "constant": "deployment",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "deployment": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "deployment",
          "description": "Runs your workflow when someone creates a deployment in the workflow's repository. Deployments created with a commit SHA may not have a Git ref."
        },
        "deployment-status-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "deployment-status-string",
          "description": "Runs your workflow when a third party provides a deployment status. Deployments created with a commit SHA may not have a Git ref.",
          "constant": "deployment_status",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "deployment-status": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "deployment-status",
          "description": "Runs your workflow when a third party provides a deployment status. Deployments created with a commit SHA may not have a Git ref."
        },
        "discussion-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-string",
          "description": "Runs your workflow when a discussion in the workflow's repository is created or modified. For activity related to comments on a discussion, use the `discussion_comment` event.",
          "constant": "discussion",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion",
          "description": "Runs your workflow when a discussion in the workflow's repository is created or modified. For activity related to comments on a discussion, use the `discussion_comment` event.",
          "oneOf": [
            "null",
            "discussion-mapping"
          ],
          "oneOfPrefix": []
        },
        "discussion-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-mapping",
          "properties": {
            "types": {
              "type": "discussion-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "discussion-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity",
          "description": "The types of discussion activity that trigger the workflow. Supported activity types: `created`, `edited`, `deleted`, `transferred`, `pinned`, `unpinned`, `labeled`, `unlabeled`, `locked`, `unlocked`, `category_changed`, `answered`, `unanswered`.",
          "oneOf": [
            "discussion-activity-type",
            "discussion-activity-types"
          ],
          "oneOfPrefix": []
        },
        "discussion-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-types",
          "itemType": "discussion-activity-type"
        },
        "discussion-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-transferred": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-transferred",
          "constant": "transferred",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-pinned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-pinned",
          "constant": "pinned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-unpinned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-unpinned",
          "constant": "unpinned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-labeled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-labeled",
          "constant": "labeled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-unlabeled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-unlabeled",
          "constant": "unlabeled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-locked": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-locked",
          "constant": "locked",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-unlocked": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-unlocked",
          "constant": "unlocked",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-category_changed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-category_changed",
          "constant": "category_changed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-answered": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-answered",
          "constant": "answered",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type-unanswered": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type-unanswered",
          "constant": "unanswered",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-activity-type",
          "oneOf": [
            "discussion-activity-type-created",
            "discussion-activity-type-edited",
            "discussion-activity-type-deleted",
            "discussion-activity-type-transferred",
            "discussion-activity-type-pinned",
            "discussion-activity-type-unpinned",
            "discussion-activity-type-labeled",
            "discussion-activity-type-unlabeled",
            "discussion-activity-type-locked",
            "discussion-activity-type-unlocked",
            "discussion-activity-type-category_changed",
            "discussion-activity-type-answered",
            "discussion-activity-type-unanswered"
          ],
          "oneOfPrefix": []
        },
        "discussion-comment-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-comment-string",
          "description": "Runs your workflow when a comment on a discussion in the workflow's repository is created or modified. For activity related to a discussion as opposed to comments on the discussion, use the `discussion` event.",
          "constant": "discussion_comment",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-comment": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-comment",
          "description": "Runs your workflow when a comment on a discussion in the workflow's repository is created or modified. For activity related to a discussion as opposed to comments on the discussion, use the `discussion` event.",
          "oneOf": [
            "null",
            "discussion-comment-mapping"
          ],
          "oneOfPrefix": []
        },
        "discussion-comment-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-comment-mapping",
          "properties": {
            "types": {
              "type": "discussion-comment-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "discussion-comment-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-comment-activity",
          "description": "The types of discussion comment activity that trigger the workflow. Supported activity types: `created`, `edited`, `deleted`.",
          "oneOf": [
            "discussion-comment-activity-type",
            "discussion-comment-activity-types"
          ],
          "oneOfPrefix": []
        },
        "discussion-comment-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-comment-activity-types",
          "itemType": "discussion-comment-activity-type"
        },
        "discussion-comment-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-comment-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-comment-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-comment-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-comment-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-comment-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "discussion-comment-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "discussion-comment-activity-type",
          "oneOf": [
            "discussion-comment-activity-type-created",
            "discussion-comment-activity-type-edited",
            "discussion-comment-activity-type-deleted"
          ],
          "oneOfPrefix": []
        },
        "fork-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "fork-string",
          "description": "Runs your workflow when someone forks a repository.",
          "constant": "fork",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "fork": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "fork",
          "description": "Runs your workflow when someone forks a repository."
        },
        "gollum-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "gollum-string",
          "description": "Runs your workflow when someone creates or updates a Wiki page.",
          "constant": "gollum",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "gollum": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "gollum",
          "description": "Runs your workflow when someone creates or updates a Wiki page."
        },
        "issue-comment-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issue-comment-string",
          "description": "Runs your workflow when an issue or pull request comment is created, edited, or deleted.",
          "constant": "issue_comment",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issue-comment": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issue-comment",
          "description": "Runs your workflow when an issue or pull request comment is created, edited, or deleted.",
          "oneOf": [
            "null",
            "issue-comment-mapping"
          ],
          "oneOfPrefix": []
        },
        "issue-comment-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issue-comment-mapping",
          "properties": {
            "types": {
              "type": "issue-comment-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "issue-comment-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issue-comment-activity",
          "description": "The types of issue comment activity that trigger the workflow. Supported activity types: `created`, `edited`, `deleted`.",
          "oneOf": [
            "issue-comment-activity-type",
            "issue-comment-activity-types"
          ],
          "oneOfPrefix": []
        },
        "issue-comment-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issue-comment-activity-types",
          "itemType": "issue-comment-activity-type"
        },
        "issue-comment-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issue-comment-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issue-comment-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issue-comment-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issue-comment-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issue-comment-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issue-comment-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issue-comment-activity-type",
          "oneOf": [
            "issue-comment-activity-type-created",
            "issue-comment-activity-type-edited",
            "issue-comment-activity-type-deleted"
          ],
          "oneOfPrefix": []
        },
        "issues-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-string",
          "description": "Runs your workflow when an issue in the workflow's repository is created or modified. For activity related to comments in an issue, use the `issue_comment` event.",
          "constant": "issues",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues",
          "description": "Runs your workflow when an issue in the workflow's repository is created or modified. For activity related to comments in an issue, use the `issue_comment` event.",
          "oneOf": [
            "null",
            "issues-mapping"
          ],
          "oneOfPrefix": []
        },
        "issues-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-mapping",
          "properties": {
            "types": {
              "type": "issues-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "issues-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity",
          "description": "The types of issue activity that trigger the workflow. Supported activity types: `opened`, `edited`, `deleted`, `transferred`, `pinned`, `unpinned`, `closed`, `reopened`, `assigned`, `unassigned`, `labeled`, `unlabeled`, `locked`, `unlocked`, `milestoned`, `demilestoned`.",
          "oneOf": [
            "issues-activity-type",
            "issues-activity-types"
          ],
          "oneOfPrefix": []
        },
        "issues-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-types",
          "itemType": "issues-activity-type"
        },
        "issues-activity-type-opened": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-opened",
          "constant": "opened",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-transferred": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-transferred",
          "constant": "transferred",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-pinned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-pinned",
          "constant": "pinned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-unpinned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-unpinned",
          "constant": "unpinned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-closed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-closed",
          "constant": "closed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-reopened": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-reopened",
          "constant": "reopened",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-assigned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-assigned",
          "constant": "assigned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-unassigned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-unassigned",
          "constant": "unassigned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-labeled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-labeled",
          "constant": "labeled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-unlabeled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-unlabeled",
          "constant": "unlabeled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-locked": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-locked",
          "constant": "locked",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-unlocked": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-unlocked",
          "constant": "unlocked",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-milestoned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-milestoned",
          "constant": "milestoned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type-demilestoned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type-demilestoned",
          "constant": "demilestoned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "issues-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "issues-activity-type",
          "oneOf": [
            "issues-activity-type-opened",
            "issues-activity-type-edited",
            "issues-activity-type-deleted",
            "issues-activity-type-transferred",
            "issues-activity-type-pinned",
            "issues-activity-type-unpinned",
            "issues-activity-type-closed",
            "issues-activity-type-reopened",
            "issues-activity-type-assigned",
            "issues-activity-type-unassigned",
            "issues-activity-type-labeled",
            "issues-activity-type-unlabeled",
            "issues-activity-type-locked",
            "issues-activity-type-unlocked",
            "issues-activity-type-milestoned",
            "issues-activity-type-demilestoned"
          ],
          "oneOfPrefix": []
        },
        "label-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "label-string",
          "description": "Runs your workflow when a label in your workflow's repository is created or modified.",
          "constant": "label",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "label": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "label",
          "description": "Runs your workflow when a label in your workflow's repository is created or modified.",
          "oneOf": [
            "null",
            "label-mapping"
          ],
          "oneOfPrefix": []
        },
        "label-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "label-mapping",
          "properties": {
            "types": {
              "type": "label-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "label-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "label-activity",
          "description": "The types of label activity that trigger the workflow. Supported activity types: `created`, `edited`, `deleted`.",
          "oneOf": [
            "label-activity-type",
            "label-activity-types"
          ],
          "oneOfPrefix": []
        },
        "label-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "label-activity-types",
          "itemType": "label-activity-type"
        },
        "label-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "label-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "label-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "label-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "label-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "label-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "label-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "label-activity-type",
          "oneOf": [
            "label-activity-type-created",
            "label-activity-type-edited",
            "label-activity-type-deleted"
          ],
          "oneOfPrefix": []
        },
        "merge-group-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "merge-group-string",
          "description": "Runs your workflow when a pull request is added to a merge queue, which adds the pull request to a merge group.",
          "constant": "merge_group",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "merge-group": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "merge-group",
          "description": "Runs your workflow when a pull request is added to a merge queue, which adds the pull request to a merge group.",
          "oneOf": [
            "null",
            "merge-group-mapping"
          ],
          "oneOfPrefix": []
        },
        "merge-group-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "merge-group-mapping",
          "properties": {
            "types": {
              "type": "merge-group-activity",
              "required": false
            },
            "branches": {
              "type": "event-branches",
              "required": false
            },
            "branches-ignore": {
              "type": "event-branches-ignore",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "merge-group-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "merge-group-activity",
          "description": "The types of merge group activity that trigger the workflow. Supported activity types: `checks_requested`.",
          "oneOf": [
            "merge-group-activity-type",
            "merge-group-activity-types"
          ],
          "oneOfPrefix": []
        },
        "merge-group-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "merge-group-activity-types",
          "itemType": "merge-group-activity-type"
        },
        "merge-group-activity-type-checks_requested": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "merge-group-activity-type-checks_requested",
          "constant": "checks_requested",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "merge-group-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "merge-group-activity-type",
          "oneOf": [
            "merge-group-activity-type-checks_requested"
          ],
          "oneOfPrefix": []
        },
        "milestone-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-string",
          "description": "Runs your workflow when a milestone in the workflow's repository is created or modified.",
          "constant": "milestone",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "milestone": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone",
          "description": "Runs your workflow when a milestone in the workflow's repository is created or modified.",
          "oneOf": [
            "null",
            "milestone-mapping"
          ],
          "oneOfPrefix": []
        },
        "milestone-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-mapping",
          "properties": {
            "types": {
              "type": "milestone-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "milestone-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-activity",
          "description": "The types of milestone activity that trigger the workflow. Supported activity types: `created`, `closed`, `opened`, `edited`, `deleted`.",
          "oneOf": [
            "milestone-activity-type",
            "milestone-activity-types"
          ],
          "oneOfPrefix": []
        },
        "milestone-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-activity-types",
          "itemType": "milestone-activity-type"
        },
        "milestone-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "milestone-activity-type-closed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-activity-type-closed",
          "constant": "closed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "milestone-activity-type-opened": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-activity-type-opened",
          "constant": "opened",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "milestone-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "milestone-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "milestone-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "milestone-activity-type",
          "oneOf": [
            "milestone-activity-type-created",
            "milestone-activity-type-closed",
            "milestone-activity-type-opened",
            "milestone-activity-type-edited",
            "milestone-activity-type-deleted"
          ],
          "oneOfPrefix": []
        },
        "page-build-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "page-build-string",
          "description": "Runs your workflow when someone pushes to a branch that is the publishing source for GitHub Pages, if GitHub Pages is enabled for the repository.",
          "constant": "page_build",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "page-build": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "page-build",
          "description": "Runs your workflow when someone pushes to a branch that is the publishing source for GitHub Pages, if GitHub Pages is enabled for the repository."
        },
        "project-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-string",
          "description": "Runs your workflow when a project board is created or modified. For activity related to cards or columns in a project board, use the `project_card` or `project_column` events instead.",
          "constant": "project",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project",
          "description": "Runs your workflow when a project board is created or modified. For activity related to cards or columns in a project board, use the `project_card` or `project_column` events instead.",
          "oneOf": [
            "null",
            "project-mapping"
          ],
          "oneOfPrefix": []
        },
        "project-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-mapping",
          "properties": {
            "types": {
              "type": "project-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "project-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-activity",
          "description": "The types of project activity that trigger the workflow. Supported activity types: `created`, `closed`, `reopened`, `edited`, `deleted`.",
          "oneOf": [
            "project-activity-type",
            "project-activity-types"
          ],
          "oneOfPrefix": []
        },
        "project-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-activity-types",
          "itemType": "project-activity-type"
        },
        "project-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-activity-type-closed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-activity-type-closed",
          "constant": "closed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-activity-type-reopened": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-activity-type-reopened",
          "constant": "reopened",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-activity-type",
          "oneOf": [
            "project-activity-type-created",
            "project-activity-type-closed",
            "project-activity-type-reopened",
            "project-activity-type-edited",
            "project-activity-type-deleted"
          ],
          "oneOfPrefix": []
        },
        "project-card-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-string",
          "description": "Runs your workflow when a card on a project board is created or modified. For activity related to project boards or columns in a project board, use the `project` or `project_column` event instead.",
          "constant": "project_card",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-card": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card",
          "description": "Runs your workflow when a card on a project board is created or modified. For activity related to project boards or columns in a project board, use the `project` or `project_column` event instead.",
          "oneOf": [
            "null",
            "project-card-mapping"
          ],
          "oneOfPrefix": []
        },
        "project-card-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-mapping",
          "properties": {
            "types": {
              "type": "project-card-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "project-card-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-activity",
          "description": "The types of project card activity that trigger the workflow. Supported activity types: `created`, `moved`, `converted`, `edited`, `deleted`.",
          "oneOf": [
            "project-card-activity-type",
            "project-card-activity-types"
          ],
          "oneOfPrefix": []
        },
        "project-card-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-activity-types",
          "itemType": "project-card-activity-type"
        },
        "project-card-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-card-activity-type-moved": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-activity-type-moved",
          "constant": "moved",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-card-activity-type-converted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-activity-type-converted",
          "constant": "converted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-card-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-card-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-card-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-card-activity-type",
          "oneOf": [
            "project-card-activity-type-created",
            "project-card-activity-type-moved",
            "project-card-activity-type-converted",
            "project-card-activity-type-edited",
            "project-card-activity-type-deleted"
          ],
          "oneOfPrefix": []
        },
        "project-column-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column-string",
          "description": "Runs your workflow when a column on a project board is created or modified. For activity related to project boards or cards in a project board, use the `project` or `project_card` event instead.",
          "constant": "project_column",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-column": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column",
          "description": "Runs your workflow when a column on a project board is created or modified. For activity related to project boards or cards in a project board, use the `project` or `project_card` event instead.",
          "oneOf": [
            "null",
            "project-column-mapping"
          ],
          "oneOfPrefix": []
        },
        "project-column-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column-mapping",
          "properties": {
            "types": {
              "type": "project-column-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "project-column-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column-activity",
          "description": "The types of project column activity that trigger the workflow. Supported activity types: `created`, `updated`, `moved`, `deleted`.",
          "oneOf": [
            "project-column-activity-type",
            "project-column-activity-types"
          ],
          "oneOfPrefix": []
        },
        "project-column-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column-activity-types",
          "itemType": "project-column-activity-type"
        },
        "project-column-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-column-activity-type-updated": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column-activity-type-updated",
          "constant": "updated",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-column-activity-type-moved": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column-activity-type-moved",
          "constant": "moved",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-column-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "project-column-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "project-column-activity-type",
          "oneOf": [
            "project-column-activity-type-created",
            "project-column-activity-type-updated",
            "project-column-activity-type-moved",
            "project-column-activity-type-deleted"
          ],
          "oneOfPrefix": []
        },
        "public-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "public-string",
          "description": "Runs your workflow when your workflow's repository changes from private to public.",
          "constant": "public",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "public": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "public",
          "description": "Runs your workflow when your workflow's repository changes from private to public."
        },
        "pull-request-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-string",
          "description": "Runs your workflow when activity on a pull request in the workflow's repository occurs. If no activity types are specified, the workflow runs when a pull request is opened, reopened, or when the head branch of the pull request is updated.",
          "constant": "pull_request",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request",
          "description": "Runs your workflow when activity on a pull request in the workflow's repository occurs. If no activity types are specified, the workflow runs when a pull request is opened, reopened, or when the head branch of the pull request is updated.",
          "oneOf": [
            "null",
            "pull-request-mapping"
          ],
          "oneOfPrefix": []
        },
        "pull-request-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-mapping",
          "properties": {
            "types": {
              "type": "pull-request-activity",
              "required": false
            },
            "branches": {
              "type": "event-branches",
              "required": false
            },
            "branches-ignore": {
              "type": "event-branches-ignore",
              "required": false
            },
            "paths": {
              "type": "event-paths",
              "required": false
            },
            "paths-ignore": {
              "type": "event-paths-ignore",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "pull-request-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity",
          "description": "The types of pull request activity that trigger the workflow. Supported activity types: `assigned`, `unassigned`, `labeled`, `unlabeled`, `opened`, `edited`, `closed`, `reopened`, `synchronize`, `converted_to_draft`, `ready_for_review`, `locked`, `unlocked`, `review_requested`, `review_request_removed`, `auto_merge_enabled`, `auto_merge_disabled`.",
          "oneOf": [
            "pull-request-activity-type",
            "pull-request-activity-types"
          ],
          "oneOfPrefix": []
        },
        "pull-request-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-types",
          "itemType": "pull-request-activity-type"
        },
        "pull-request-activity-type-assigned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-assigned",
          "constant": "assigned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-unassigned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-unassigned",
          "constant": "unassigned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-labeled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-labeled",
          "constant": "labeled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-unlabeled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-unlabeled",
          "constant": "unlabeled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-opened": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-opened",
          "constant": "opened",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-closed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-closed",
          "constant": "closed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-reopened": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-reopened",
          "constant": "reopened",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-synchronize": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-synchronize",
          "constant": "synchronize",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-converted_to_draft": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-converted_to_draft",
          "constant": "converted_to_draft",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-ready_for_review": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-ready_for_review",
          "constant": "ready_for_review",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-locked": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-locked",
          "constant": "locked",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-unlocked": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-unlocked",
          "constant": "unlocked",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-review_requested": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-review_requested",
          "constant": "review_requested",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-review_request_removed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-review_request_removed",
          "constant": "review_request_removed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-auto_merge_enabled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-auto_merge_enabled",
          "constant": "auto_merge_enabled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type-auto_merge_disabled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type-auto_merge_disabled",
          "constant": "auto_merge_disabled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-activity-type",
          "oneOf": [
            "pull-request-activity-type-assigned",
            "pull-request-activity-type-unassigned",
            "pull-request-activity-type-labeled",
            "pull-request-activity-type-unlabeled",
            "pull-request-activity-type-opened",
            "pull-request-activity-type-edited",
            "pull-request-activity-type-closed",
            "pull-request-activity-type-reopened",
            "pull-request-activity-type-synchronize",
            "pull-request-activity-type-converted_to_draft",
            "pull-request-activity-type-ready_for_review",
            "pull-request-activity-type-locked",
            "pull-request-activity-type-unlocked",
            "pull-request-activity-type-review_requested",
            "pull-request-activity-type-review_request_removed",
            "pull-request-activity-type-auto_merge_enabled",
            "pull-request-activity-type-auto_merge_disabled"
          ],
          "oneOfPrefix": []
        },
        "pull-request-comment-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-comment-string",
          "description": "Please use the `issue_comment` event instead.",
          "constant": "pull_request_comment",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-comment": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-comment",
          "description": "Please use the `issue_comment` event instead.",
          "oneOf": [
            "null",
            "issue-comment-mapping"
          ],
          "oneOfPrefix": []
        },
        "pull-request-review-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-string",
          "description": "Runs your workflow when a pull request review is submitted, edited, or dismissed. A pull request review is a group of pull request review comments in addition to a body comment and a state. For activity related to pull request review comments or pull request comments, use the `pull_request_review_comment` or `issue_comment` events instead.",
          "constant": "pull_request_review",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-review": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review",
          "description": "Runs your workflow when a pull request review is submitted, edited, or dismissed. A pull request review is a group of pull request review comments in addition to a body comment and a state. For activity related to pull request review comments or pull request comments, use the `pull_request_review_comment` or `issue_comment` events instead.",
          "oneOf": [
            "null",
            "pull-request-review-mapping"
          ],
          "oneOfPrefix": []
        },
        "pull-request-review-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-mapping",
          "properties": {
            "types": {
              "type": "pull-request-review-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "pull-request-review-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-activity",
          "description": "The types of pull request review activity that trigger the workflow. Supported activity types: `submitted`, `edited`, `dismissed`.",
          "oneOf": [
            "pull-request-review-activity-type",
            "pull-request-review-activity-types"
          ],
          "oneOfPrefix": []
        },
        "pull-request-review-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-activity-types",
          "itemType": "pull-request-review-activity-type"
        },
        "pull-request-review-activity-type-submitted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-activity-type-submitted",
          "constant": "submitted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-review-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-review-activity-type-dismissed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-activity-type-dismissed",
          "constant": "dismissed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-review-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-activity-type",
          "oneOf": [
            "pull-request-review-activity-type-submitted",
            "pull-request-review-activity-type-edited",
            "pull-request-review-activity-type-dismissed"
          ],
          "oneOfPrefix": []
        },
        "pull-request-review-comment-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-comment-string",
          "description": "",
          "constant": "pull_request_review_comment",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-review-comment": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-comment",
          "description": "",
          "oneOf": [
            "null",
            "pull-request-review-comment-mapping"
          ],
          "oneOfPrefix": []
        },
        "pull-request-review-comment-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-comment-mapping",
          "properties": {
            "types": {
              "type": "pull-request-review-comment-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "pull-request-review-comment-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-comment-activity",
          "description": "The types of pull request review comment activity that trigger the workflow. Supported activity types: `created`, `edited`, `deleted`.",
          "oneOf": [
            "pull-request-review-comment-activity-type",
            "pull-request-review-comment-activity-types"
          ],
          "oneOfPrefix": []
        },
        "pull-request-review-comment-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-comment-activity-types",
          "itemType": "pull-request-review-comment-activity-type"
        },
        "pull-request-review-comment-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-comment-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-review-comment-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-comment-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-review-comment-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-comment-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-review-comment-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-review-comment-activity-type",
          "oneOf": [
            "pull-request-review-comment-activity-type-created",
            "pull-request-review-comment-activity-type-edited",
            "pull-request-review-comment-activity-type-deleted"
          ],
          "oneOfPrefix": []
        },
        "pull-request-target-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-string",
          "description": "Runs your workflow when activity on a pull request in the workflow's repository occurs. If no activity types are specified, the workflow runs when a pull request is opened, reopened, or when the head branch of the pull request is updated.\n\nThis event runs in the context of the base of the pull request, rather than in the context of the merge commit, as the `pull_request` event does. This prevents execution of unsafe code from the head of the pull request that could alter your repository or steal any secrets you use in your workflow. This event allows your workflow to do things like label or comment on pull requests from forks. Avoid using this event if you need to build or run code from the pull request.",
          "constant": "pull_request_target",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target",
          "description": "Runs your workflow when activity on a pull request in the workflow's repository occurs. If no activity types are specified, the workflow runs when a pull request is opened, reopened, or when the head branch of the pull request is updated.\n\nThis event runs in the context of the base of the pull request, rather than in the context of the merge commit, as the `pull_request` event does. This prevents execution of unsafe code from the head of the pull request that could alter your repository or steal any secrets you use in your workflow. This event allows your workflow to do things like label or comment on pull requests from forks. Avoid using this event if you need to build or run code from the pull request.",
          "oneOf": [
            "null",
            "pull-request-target-mapping"
          ],
          "oneOfPrefix": []
        },
        "pull-request-target-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-mapping",
          "properties": {
            "types": {
              "type": "pull-request-target-activity",
              "required": false
            },
            "branches": {
              "type": "event-branches",
              "required": false
            },
            "branches-ignore": {
              "type": "event-branches-ignore",
              "required": false
            },
            "paths": {
              "type": "event-paths",
              "required": false
            },
            "paths-ignore": {
              "type": "event-paths-ignore",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "pull-request-target-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity",
          "description": "The types of pull request activity that trigger the workflow. Supported activity types: `assigned`, `unassigned`, `labeled`, `unlabeled`, `opened`, `edited`, `closed`, `reopened`, `synchronize`, `converted_to_draft`, `ready_for_review`, `locked`, `unlocked`, `review_requested`, `review_request_removed`, `auto_merge_enabled`, `auto_merge_disabled`.",
          "oneOf": [
            "pull-request-target-activity-type",
            "pull-request-target-activity-types"
          ],
          "oneOfPrefix": []
        },
        "pull-request-target-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-types",
          "itemType": "pull-request-target-activity-type"
        },
        "pull-request-target-activity-type-assigned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-assigned",
          "constant": "assigned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-unassigned": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-unassigned",
          "constant": "unassigned",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-labeled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-labeled",
          "constant": "labeled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-unlabeled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-unlabeled",
          "constant": "unlabeled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-opened": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-opened",
          "constant": "opened",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-closed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-closed",
          "constant": "closed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-reopened": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-reopened",
          "constant": "reopened",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-synchronize": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-synchronize",
          "constant": "synchronize",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-converted_to_draft": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-converted_to_draft",
          "constant": "converted_to_draft",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-ready_for_review": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-ready_for_review",
          "constant": "ready_for_review",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-locked": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-locked",
          "constant": "locked",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-unlocked": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-unlocked",
          "constant": "unlocked",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-review_requested": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-review_requested",
          "constant": "review_requested",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-review_request_removed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-review_request_removed",
          "constant": "review_request_removed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-auto_merge_enabled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-auto_merge_enabled",
          "constant": "auto_merge_enabled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type-auto_merge_disabled": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type-auto_merge_disabled",
          "constant": "auto_merge_disabled",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "pull-request-target-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "pull-request-target-activity-type",
          "oneOf": [
            "pull-request-target-activity-type-assigned",
            "pull-request-target-activity-type-unassigned",
            "pull-request-target-activity-type-labeled",
            "pull-request-target-activity-type-unlabeled",
            "pull-request-target-activity-type-opened",
            "pull-request-target-activity-type-edited",
            "pull-request-target-activity-type-closed",
            "pull-request-target-activity-type-reopened",
            "pull-request-target-activity-type-synchronize",
            "pull-request-target-activity-type-converted_to_draft",
            "pull-request-target-activity-type-ready_for_review",
            "pull-request-target-activity-type-locked",
            "pull-request-target-activity-type-unlocked",
            "pull-request-target-activity-type-review_requested",
            "pull-request-target-activity-type-review_request_removed",
            "pull-request-target-activity-type-auto_merge_enabled",
            "pull-request-target-activity-type-auto_merge_disabled"
          ],
          "oneOfPrefix": []
        },
        "push-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "push-string",
          "description": "Runs your workflow when you push a commit or tag.",
          "constant": "push",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "push": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "push",
          "description": "Runs your workflow when you push a commit or tag.",
          "oneOf": [
            "null",
            "push-mapping"
          ],
          "oneOfPrefix": []
        },
        "push-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "push-mapping",
          "properties": {
            "branches": {
              "type": "event-branches",
              "required": false
            },
            "branches-ignore": {
              "type": "event-branches-ignore",
              "required": false
            },
            "tags": {
              "type": "event-tags",
              "required": false
            },
            "tags-ignore": {
              "type": "event-tags-ignore",
              "required": false
            },
            "paths": {
              "type": "event-paths",
              "required": false
            },
            "paths-ignore": {
              "type": "event-paths-ignore",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "registry-package-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "registry-package-string",
          "description": "Runs your workflow when activity related to GitHub Packages occurs in your repository.",
          "constant": "registry_package",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "registry-package": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "registry-package",
          "description": "Runs your workflow when activity related to GitHub Packages occurs in your repository.",
          "oneOf": [
            "null",
            "registry-package-mapping"
          ],
          "oneOfPrefix": []
        },
        "registry-package-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "registry-package-mapping",
          "properties": {
            "types": {
              "type": "registry-package-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "registry-package-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "registry-package-activity",
          "description": "The types of registry package activity that trigger the workflow. Supported activity types: `published`, `updated`.",
          "oneOf": [
            "registry-package-activity-type",
            "registry-package-activity-types"
          ],
          "oneOfPrefix": []
        },
        "registry-package-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "registry-package-activity-types",
          "itemType": "registry-package-activity-type"
        },
        "registry-package-activity-type-published": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "registry-package-activity-type-published",
          "constant": "published",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "registry-package-activity-type-updated": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "registry-package-activity-type-updated",
          "constant": "updated",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "registry-package-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "registry-package-activity-type",
          "oneOf": [
            "registry-package-activity-type-published",
            "registry-package-activity-type-updated"
          ],
          "oneOfPrefix": []
        },
        "release-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-string",
          "description": "Runs your workflow when release activity in your repository occurs.",
          "constant": "release",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "release": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release",
          "description": "Runs your workflow when release activity in your repository occurs.",
          "oneOf": [
            "null",
            "release-mapping"
          ],
          "oneOfPrefix": []
        },
        "release-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-mapping",
          "properties": {
            "types": {
              "type": "release-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "release-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity",
          "description": "The types of release activity that trigger the workflow. Supported activity types: `published`, `unpublished`, `created`, `edited`, `deleted`, `prereleased`, `released`.",
          "oneOf": [
            "release-activity-type",
            "release-activity-types"
          ],
          "oneOfPrefix": []
        },
        "release-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity-types",
          "itemType": "release-activity-type"
        },
        "release-activity-type-published": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity-type-published",
          "constant": "published",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "release-activity-type-unpublished": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity-type-unpublished",
          "constant": "unpublished",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "release-activity-type-created": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity-type-created",
          "constant": "created",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "release-activity-type-edited": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity-type-edited",
          "constant": "edited",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "release-activity-type-deleted": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity-type-deleted",
          "constant": "deleted",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "release-activity-type-prereleased": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity-type-prereleased",
          "constant": "prereleased",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "release-activity-type-released": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity-type-released",
          "constant": "released",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "release-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "release-activity-type",
          "oneOf": [
            "release-activity-type-published",
            "release-activity-type-unpublished",
            "release-activity-type-created",
            "release-activity-type-edited",
            "release-activity-type-deleted",
            "release-activity-type-prereleased",
            "release-activity-type-released"
          ],
          "oneOfPrefix": []
        },
        "schedule-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "schedule-string",
          "description": "The `schedule` event allows you to trigger a workflow at a scheduled time.\n\nYou can schedule a workflow to run at specific UTC times using POSIX cron syntax. Scheduled workflows run on the latest commit on the default or base branch. The shortest interval you can run scheduled workflows is once every 5 minutes. GitHub Actions does not support the non-standard syntax `@yearly`, `@monthly`, `@weekly`, `@daily`, `@hourly`, and `@reboot`.",
          "constant": "schedule",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "schedule": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "schedule",
          "description": "The `schedule` event allows you to trigger a workflow at a scheduled time.\n\nYou can schedule a workflow to run at specific UTC times using POSIX cron syntax. Scheduled workflows run on the latest commit on the default or base branch. The shortest interval you can run scheduled workflows is once every 5 minutes. GitHub Actions does not support the non-standard syntax `@yearly`, `@monthly`, `@weekly`, `@daily`, `@hourly`, and `@reboot`.",
          "itemType": "cron-mapping"
        },
        "status-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "status-string",
          "description": "Runs your workflow when the status of a Git commit changes. For example, commits can be marked as `error`, `failure`, `pending`, or `success`. If you want to provide more details about the status change, you may want to use the `check_run` event.",
          "constant": "status",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "status": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "status",
          "description": "Runs your workflow when the status of a Git commit changes. For example, commits can be marked as `error`, `failure`, `pending`, or `success`. If you want to provide more details about the status change, you may want to use the `check_run` event."
        },
        "watch-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "watch-string",
          "description": "Runs your workflow when the workflow's repository is starred.",
          "constant": "watch",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "watch": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "watch",
          "description": "Runs your workflow when the workflow's repository is starred.",
          "oneOf": [
            "null",
            "watch-mapping"
          ],
          "oneOfPrefix": []
        },
        "watch-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "watch-mapping",
          "properties": {
            "types": {
              "type": "watch-activity",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "watch-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "watch-activity",
          "description": "The types of watch activity that trigger the workflow. Supported activity types: `started`.",
          "oneOf": [
            "watch-activity-type",
            "watch-activity-types"
          ],
          "oneOfPrefix": []
        },
        "watch-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "watch-activity-types",
          "itemType": "watch-activity-type"
        },
        "watch-activity-type-started": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "watch-activity-type-started",
          "constant": "started",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "watch-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "watch-activity-type",
          "oneOf": [
            "watch-activity-type-started"
          ],
          "oneOfPrefix": []
        },
        "workflow-run-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run-string",
          "description": "This event occurs when a workflow run is requested or completed. It allows you to execute a workflow based on execution or completion of another workflow. The workflow started by the `workflow_run` event is able to access secrets and write tokens, even if the previous workflow was not. This is useful in cases where the previous workflow is intentionally not privileged, but you need to take a privileged action in a later workflow.",
          "constant": "workflow_run",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "workflow-run": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run",
          "description": "This event occurs when a workflow run is requested or completed. It allows you to execute a workflow based on execution or completion of another workflow. The workflow started by the `workflow_run` event is able to access secrets and write tokens, even if the previous workflow was not. This is useful in cases where the previous workflow is intentionally not privileged, but you need to take a privileged action in a later workflow.",
          "oneOf": [
            "null",
            "workflow-run-mapping"
          ],
          "oneOfPrefix": []
        },
        "workflow-run-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run-mapping",
          "properties": {
            "types": {
              "type": "workflow-run-activity",
              "required": false
            },
            "workflows": {
              "type": "workflow-run-workflows",
              "required": false
            },
            "branches": {
              "type": "event-branches",
              "required": false
            },
            "branches-ignore": {
              "type": "event-branches-ignore",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-run-workflows": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run-workflows",
          "description": "The name of the workflow that triggers the `workflow_run` event. The workflow must be in the same repository as the workflow that uses the `workflow_run` event.",
          "oneOf": [
            "non-empty-string",
            "sequence-of-non-empty-string"
          ],
          "oneOfPrefix": []
        },
        "workflow-run-activity": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run-activity",
          "description": "The types of workflow run activity that trigger the workflow. Supported activity types: `completed`, `requested`, `in_progress`.",
          "oneOf": [
            "workflow-run-activity-type",
            "workflow-run-activity-types"
          ],
          "oneOfPrefix": []
        },
        "workflow-run-activity-types": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run-activity-types",
          "itemType": "workflow-run-activity-type"
        },
        "workflow-run-activity-type-requested": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run-activity-type-requested",
          "constant": "requested",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "workflow-run-activity-type-completed": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run-activity-type-completed",
          "constant": "completed",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "workflow-run-activity-type-in_progress": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run-activity-type-in_progress",
          "constant": "in_progress",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "workflow-run-activity-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-run-activity-type",
          "oneOf": [
            "workflow-run-activity-type-requested",
            "workflow-run-activity-type-completed",
            "workflow-run-activity-type-in_progress"
          ],
          "oneOfPrefix": []
        },
        "event-branches": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "event-branches",
          "description": "Use the `branches` filter when you want to include branch name patterns or when you want to both include and exclude branch name patterns. You cannot use both the `branches` and `branches-ignore` filters for the same event in a workflow.",
          "oneOf": [
            "non-empty-string",
            "sequence-of-non-empty-string"
          ],
          "oneOfPrefix": []
        },
        "event-branches-ignore": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "event-branches-ignore",
          "description": "Use the `branches-ignore` filter when you only want to exclude branch name patterns. You cannot use both the `branches` and `branches-ignore` filters for the same event in a workflow.",
          "oneOf": [
            "non-empty-string",
            "sequence-of-non-empty-string"
          ],
          "oneOfPrefix": []
        },
        "event-tags": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "event-tags",
          "description": "Use the `tags` filter when you want to include tag name patterns or when you want to both include and exclude tag names patterns. You cannot use both the `tags` and `tags-ignore` filters for the same event in a workflow.",
          "oneOf": [
            "non-empty-string",
            "sequence-of-non-empty-string"
          ],
          "oneOfPrefix": []
        },
        "event-tags-ignore": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "event-tags-ignore",
          "description": "Use the `tags-ignore` filter when you only want to exclude tag name patterns. You cannot use both the `tags` and `tags-ignore` filters for the same event in a workflow.",
          "oneOf": [
            "non-empty-string",
            "sequence-of-non-empty-string"
          ],
          "oneOfPrefix": []
        },
        "event-paths": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "event-paths",
          "description": "Use the `paths` filter when you want to include file path patterns or when you want to both include and exclude file path patterns. You cannot use both the `paths` and `paths-ignore` filters for the same event in a workflow.",
          "oneOf": [
            "non-empty-string",
            "sequence-of-non-empty-string"
          ],
          "oneOfPrefix": []
        },
        "event-paths-ignore": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "event-paths-ignore",
          "description": "Use the `paths-ignore` filter when you only want to exclude file path patterns. You cannot use both the `paths` and `paths-ignore` filters for the same event in a workflow.",
          "oneOf": [
            "non-empty-string",
            "sequence-of-non-empty-string"
          ],
          "oneOfPrefix": []
        },
        "repository-dispatch-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "repository-dispatch-string",
          "description": "You can use the GitHub API to trigger a webhook event called `repository_dispatch` when you want to trigger a workflow for activity that happens outside of GitHub.",
          "constant": "branch_protection_rule",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "repository-dispatch": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "repository-dispatch",
          "description": "You can use the GitHub API to trigger a webhook event called `repository_dispatch` when you want to trigger a workflow for activity that happens outside of GitHub.",
          "oneOf": [
            "null",
            "repository-dispatch-mapping"
          ],
          "oneOfPrefix": []
        },
        "repository-dispatch-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "repository-dispatch-mapping",
          "properties": {
            "types": {
              "type": "sequence-of-non-empty-string",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-call-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-string",
          "description": "The `workflow_call` event is used to indicate that a workflow can be called by another workflow. When a workflow is triggered with the `workflow_call` event, the event payload in the called workflow is the same event payload from the calling workflow.",
          "constant": "workflow_call",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "workflow-call": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call",
          "description": "The `workflow_call` event is used to indicate that a workflow can be called by another workflow. When a workflow is triggered with the `workflow_call` event, the event payload in the called workflow is the same event payload from the calling workflow.",
          "oneOf": [
            "null",
            "workflow-call-mapping"
          ],
          "oneOfPrefix": []
        },
        "workflow-call-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-mapping",
          "properties": {
            "inputs": {
              "type": "workflow-call-inputs",
              "required": false
            },
            "secrets": {
              "type": "workflow-call-secrets",
              "required": false
            },
            "outputs": {
              "type": "workflow-call-outputs",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-call-inputs": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-inputs",
          "description": "Inputs that are passed to the called workflow from the caller workflow.",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "workflow-call-input-definition"
        },
        "workflow-call-input-definition": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-input-definition",
          "properties": {
            "description": {
              "type": "string",
              "required": false,
              "description": "A string description of the input parameter."
            },
            "type": {
              "type": "workflow-call-input-type",
              "required": true
            },
            "required": {
              "type": "boolean",
              "required": false,
              "description": "A boolean to indicate whether the action requires the input parameter. Set to `true` when the parameter is required."
            },
            "default": {
              "type": "workflow-call-input-default",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-call-input-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-input-type",
          "description": "Required if input is defined for the `on.workflow_call` keyword. The value of this parameter is a string specifying the data type of the input. This must be one of: `boolean`, `number`, or `string`.",
          "oneOf": [
            "input-type-string",
            "input-type-boolean",
            "input-type-number"
          ],
          "oneOfPrefix": []
        },
        "input-type-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "input-type-string",
          "constant": "string",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "input-type-boolean": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "input-type-boolean",
          "constant": "boolean",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "input-type-number": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "input-type-number",
          "constant": "number",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "input-type-choice": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "input-type-choice",
          "constant": "choice",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "input-type-environment": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "input-type-environment",
          "constant": "environment",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "workflow-call-input-default": {
          "readerContext": [
            "github",
            "inputs",
            "vars"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars"
          ],
          "key": "workflow-call-input-default",
          "description": "If a `default` parameter is not set, the default value of the input is `false` for boolean, `0` for a number, and `\"\"` for a string.",
          "oneOf": [
            "string",
            "boolean",
            "number"
          ],
          "oneOfPrefix": []
        },
        "workflow-call-secrets": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-secrets",
          "description": "A map of the secrets that can be used in the called workflow. Within the called workflow, you can use the `secrets` context to refer to a secret.",
          "properties": {},
          "looseKeyType": "workflow-call-secret-name",
          "looseValueType": "workflow-call-secret-definition"
        },
        "workflow-call-secret-name": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-secret-name",
          "description": "A string identifier to associate with the secret.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        },
        "workflow-call-secret-definition": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-secret-definition",
          "oneOf": [
            "null",
            "workflow-call-secret-mapping-definition"
          ],
          "oneOfPrefix": []
        },
        "workflow-call-secret-mapping-definition": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-secret-mapping-definition",
          "properties": {
            "description": {
              "type": "string",
              "required": false,
              "description": "A string description of the secret parameter."
            },
            "required": {
              "type": "boolean",
              "required": false,
              "description": "A boolean specifying whether the secret must be supplied."
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-call-outputs": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-outputs",
          "description": "A reusable workflow may generate data that you want to use in the caller workflow. To use these outputs, you must specify them as the outputs of the reusable workflow.",
          "properties": {},
          "looseKeyType": "workflow-call-output-name",
          "looseValueType": "workflow-call-output-definition"
        },
        "workflow-call-output-name": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-output-name",
          "description": "A string identifier to associate with the output. The value of `<output_id>` is a map of the input's metadata. The `<output_id>` must be a unique identifier within the outputs object and must start with a letter or _ and contain only alphanumeric characters, -, or _.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        },
        "workflow-call-output-definition": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-call-output-definition",
          "properties": {
            "description": {
              "type": "string",
              "required": false,
              "description": "A string description of the output parameter."
            },
            "value": {
              "type": "workflow-output-context",
              "required": true
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-output-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "jobs"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "jobs"
          ],
          "key": "workflow-output-context",
          "description": "The value to assign to the output parameter.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "workflow-dispatch-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-dispatch-string",
          "description": "The `workflow_dispatch` event allows you to manually trigger a workflow run. A workflow can be manually triggered using the GitHub API, GitHub CLI, or GitHub browser interface.",
          "constant": "workflow_dispatch",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "workflow-dispatch": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-dispatch",
          "description": "The `workflow_dispatch` event allows you to manually trigger a workflow run. A workflow can be manually triggered using the GitHub API, GitHub CLI, or GitHub browser interface.",
          "oneOf": [
            "null",
            "workflow-dispatch-mapping"
          ],
          "oneOfPrefix": []
        },
        "workflow-dispatch-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-dispatch-mapping",
          "properties": {
            "inputs": {
              "type": "workflow-dispatch-inputs",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-dispatch-inputs": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-dispatch-inputs",
          "description": "You can configure custom-defined input properties, default input values, and required inputs for the event directly in your workflow. When you trigger the event, you can provide the `ref` and any `inputs`. When the workflow runs, you can access the input values in the `inputs` context.",
          "properties": {},
          "looseKeyType": "workflow-dispatch-input-name",
          "looseValueType": "workflow-dispatch-input"
        },
        "workflow-dispatch-input-name": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-dispatch-input-name",
          "description": "A string identifier to associate with the input. The value of <input_id> is a map of the input's metadata. The <input_id> must be a unique identifier within the inputs object. The <input_id> must start with a letter or _ and contain only alphanumeric characters, -, or _.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        },
        "workflow-dispatch-input": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-dispatch-input",
          "properties": {
            "description": {
              "type": "string",
              "required": false,
              "description": "A string description of the input parameter."
            },
            "type": {
              "type": "workflow-dispatch-input-type",
              "required": false
            },
            "required": {
              "type": "boolean",
              "required": false,
              "description": "A boolean to indicate whether the workflow requires the input parameter. Set to true when the parameter is required."
            },
            "default": {
              "type": "workflow-dispatch-input-default",
              "required": false
            },
            "options": {
              "type": "sequence-of-non-empty-string",
              "required": false,
              "description": "The options of the dropdown list, if the type is a choice."
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-dispatch-input-type": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-dispatch-input-type",
          "description": "A string representing the type of the input. This must be one of: `boolean`, `number`, `string`, `choice`, or `environment`.",
          "oneOf": [
            "input-type-string",
            "input-type-boolean",
            "input-type-number",
            "input-type-environment",
            "input-type-choice"
          ],
          "oneOfPrefix": []
        },
        "workflow-dispatch-input-default": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-dispatch-input-default",
          "description": "The default value is used when an input parameter isn't specified in a workflow file.",
          "oneOf": [
            "string",
            "boolean",
            "number"
          ],
          "oneOfPrefix": []
        },
        "permissions": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permissions",
          "description": "You can use `permissions` to modify the default permissions granted to the `GITHUB_TOKEN`, adding or removing access as required, so that you only allow the minimum required access.\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#permissions)",
          "oneOf": [
            "permissions-mapping",
            "permission-level-shorthand-read-all",
            "permission-level-shorthand-write-all"
          ],
          "oneOfPrefix": []
        },
        "permissions-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permissions-mapping",
          "properties": {
            "actions": {
              "type": "permission-level-any",
              "required": false,
              "description": "Actions workflows, workflow runs, and artifacts."
            },
            "checks": {
              "type": "permission-level-any",
              "required": false,
              "description": "Check runs and check suites."
            },
            "contents": {
              "type": "permission-level-any",
              "required": false,
              "description": "Repository contents, commits, branches, downloads, releases, and merges."
            },
            "deployments": {
              "type": "permission-level-any",
              "required": false,
              "description": "Deployments and deployment statuses."
            },
            "discussions": {
              "type": "permission-level-any",
              "required": false,
              "description": "Discussions and related comments and labels."
            },
            "id-token": {
              "type": "permission-level-write-or-no-access",
              "required": false,
              "description": "Token to request an OpenID Connect token."
            },
            "issues": {
              "type": "permission-level-any",
              "required": false,
              "description": "Issues and related comments, assignees, labels, and milestones."
            },
            "packages": {
              "type": "permission-level-any",
              "required": false,
              "description": "Packages published to the GitHub Package Platform."
            },
            "pages": {
              "type": "permission-level-any",
              "required": false,
              "description": "Retrieve Pages statuses, configuration, and builds, as well as create new builds."
            },
            "pull-requests": {
              "type": "permission-level-any",
              "required": false,
              "description": "Pull requests and related comments, assignees, labels, milestones, and merges."
            },
            "repository-projects": {
              "type": "permission-level-any",
              "required": false,
              "description": "Classic projects within a repository."
            },
            "security-events": {
              "type": "permission-level-any",
              "required": false,
              "description": "Code scanning and Dependabot alerts."
            },
            "statuses": {
              "type": "permission-level-any",
              "required": false,
              "description": "Commit statuses."
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "permission-level-any": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permission-level-any",
          "description": "The permission level for the `GITHUB_TOKEN`.",
          "oneOf": [
            "permission-level-read",
            "permission-level-write",
            "permission-level-no-access"
          ],
          "oneOfPrefix": []
        },
        "permission-level-read-or-no-access": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permission-level-read-or-no-access",
          "oneOf": [
            "permission-level-read",
            "permission-level-no-access"
          ],
          "oneOfPrefix": []
        },
        "permission-level-write-or-no-access": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permission-level-write-or-no-access",
          "oneOf": [
            "permission-level-write",
            "permission-level-no-access"
          ],
          "oneOfPrefix": []
        },
        "permission-level-read": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permission-level-read",
          "description": "The permission level for the `GITHUB_TOKEN`. Grants `read` permission for the specified scope.",
          "constant": "read",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "permission-level-write": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permission-level-write",
          "description": "The permission level for the `GITHUB_TOKEN`. Grants `write` permission for the specified scope.",
          "constant": "write",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "permission-level-no-access": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permission-level-no-access",
          "description": "The permission level for the `GITHUB_TOKEN`. Restricts all access for the specified scope.",
          "constant": "none",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "permission-level-shorthand-read-all": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permission-level-shorthand-read-all",
          "description": "The permission level for the `GITHUB_TOKEN`. Grants `read` access for all scopes.",
          "constant": "read-all",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "permission-level-shorthand-write-all": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "permission-level-shorthand-write-all",
          "description": "The permission level for the `GITHUB_TOKEN`. Grants `write` access for all scopes.",
          "constant": "write-all",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "workflow-defaults": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-defaults",
          "description": "Use `defaults` to create a map of default settings that will apply to all jobs in the workflow. You can also set default settings that are only available to a job.\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#defaults)",
          "properties": {
            "run": {
              "type": "workflow-defaults-run",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-defaults-run": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-defaults-run",
          "properties": {
            "shell": {
              "type": "shell",
              "required": false
            },
            "working-directory": {
              "type": "working-directory",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-env": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "secrets"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "secrets"
          ],
          "key": "workflow-env",
          "description": "A map of environment variables that are available to the steps of all jobs in the workflow. You can also set environment variables that are only available to the steps of a single job or to a single step.\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#env)",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "string"
        },
        "jobs": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "jobs",
          "description": "A workflow run is made up of one or more `jobs`, which run in parallel by default. To run jobs sequentially, you can define dependencies on other jobs using the `jobs.<job_id>.needs` keyword. Each job runs in a runner environment specified by `runs-on`.\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#jobs)",
          "properties": {},
          "looseKeyType": "job-id",
          "looseValueType": "job"
        },
        "job-id": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "job-id",
          "description": "A unique identifier for the job. The identifier must start with a letter or _ and contain only alphanumeric characters, -, or _.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        },
        "job": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "job",
          "description": "Each job must have an id to associate with the job. The key `job_id` is a string and its value is a map of the job's configuration data. You must replace `<job_id>` with a string that is unique to the jobs object. The `<job_id>` must start with a letter or _ and contain only alphanumeric characters, -, or _.",
          "oneOf": [
            "job-factory",
            "workflow-job"
          ],
          "oneOfPrefix": []
        },
        "job-factory": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "job-factory",
          "properties": {
            "needs": {
              "type": "needs",
              "required": false
            },
            "if": {
              "type": "job-if",
              "required": false
            },
            "strategy": {
              "type": "strategy",
              "required": false
            },
            "name": {
              "type": "string-strategy-context",
              "required": false,
              "description": "The name of the job displayed on GitHub."
            },
            "runs-on": {
              "type": "runs-on",
              "required": true
            },
            "timeout-minutes": {
              "type": "number-strategy-context",
              "required": false,
              "description": "The maximum number of minutes to let a workflow run before GitHub automatically cancels it. Default: 360"
            },
            "cancel-timeout-minutes": {
              "type": "number-strategy-context",
              "required": false
            },
            "continue-on-error": {
              "type": "boolean-strategy-context",
              "required": false,
              "description": "Prevents a workflow run from failing when a job fails. Set to true to allow a workflow run to pass when this job fails."
            },
            "container": {
              "type": "container",
              "required": false
            },
            "services": {
              "type": "services",
              "required": false
            },
            "env": {
              "type": "job-env",
              "required": false
            },
            "environment": {
              "type": "job-environment",
              "required": false
            },
            "permissions": {
              "type": "permissions",
              "required": false
            },
            "concurrency": {
              "type": "job-concurrency",
              "required": false
            },
            "outputs": {
              "type": "job-outputs",
              "required": false
            },
            "defaults": {
              "type": "job-defaults",
              "required": false
            },
            "steps": {
              "type": "steps",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-job": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-job",
          "properties": {
            "name": {
              "type": "string-strategy-context",
              "required": false,
              "description": "The name of the job displayed on GitHub."
            },
            "uses": {
              "type": "non-empty-string",
              "required": true,
              "description": "The location and version of a reusable workflow file to run as a job. Use one of the following formats:\n\n* `{owner}/{repo}/.github/workflows/{filename}@{ref}` for reusable workflows in public and private repositories.\n* `./.github/workflows/{filename}` for reusable workflows in the same repository.\n\n{ref} can be a SHA, a release tag, or a branch name. Using the commit SHA is the safest for stability and security."
            },
            "with": {
              "type": "workflow-job-with",
              "required": false
            },
            "secrets": {
              "type": "workflow-job-secrets",
              "required": false
            },
            "needs": {
              "type": "needs",
              "required": false
            },
            "if": {
              "type": "job-if",
              "required": false
            },
            "permissions": {
              "type": "permissions",
              "required": false
            },
            "concurrency": {
              "type": "job-concurrency",
              "required": false
            },
            "strategy": {
              "type": "strategy",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "workflow-job-with": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-job-with",
          "description": "When a job is used to call a reusable workflow, you can use `with` to provide a map of inputs that are passed to the called workflow.\n\nAny inputs that you pass must match the input specifications defined in the called workflow.",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "scalar-needs-context"
        },
        "workflow-job-secrets": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-job-secrets",
          "description": "When a job is used to call a reusable workflow, you can use `secrets` to provide a map of secrets that are passed to the called workflow.\n\nAny secrets that you pass must match the names defined in the called workflow.",
          "oneOf": [
            "workflow-job-secrets-mapping",
            "workflow-job-secrets-inherit"
          ],
          "oneOfPrefix": []
        },
        "workflow-job-secrets-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-job-secrets-mapping",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "scalar-needs-context-with-secrets"
        },
        "workflow-job-secrets-inherit": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "workflow-job-secrets-inherit",
          "constant": "inherit",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "needs": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "needs",
          "description": "Use `needs` to identify any jobs that must complete successfully before this job will run. It can be a string or array of strings. If a job fails, all jobs that need it are skipped unless the jobs use a conditional expression that causes the job to continue. If a run contains a series of jobs that need each other, a failure applies to all jobs in the dependency chain from the point of failure onwards.",
          "oneOf": [
            "sequence-of-non-empty-string",
            "non-empty-string"
          ],
          "oneOfPrefix": []
        },
        "job-if": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "always(0,0)",
            "failure(0,MAX)",
            "cancelled(0,0)",
            "success(0,MAX)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "always()",
            "failure()",
            "cancelled()",
            "success()"
          ],
          "key": "job-if",
          "description": "You can use the `if` conditional to prevent a job from running unless a condition is met. You can use any supported context and expression to create a conditional.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": true
        },
        "job-if-result": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "always(0,0)",
            "failure(0,MAX)",
            "cancelled(0,0)",
            "success(0,MAX)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "always()",
            "failure()",
            "cancelled()",
            "success()"
          ],
          "key": "job-if-result",
          "oneOf": [
            "null",
            "boolean",
            "number",
            "string",
            "sequence",
            "mapping"
          ],
          "oneOfPrefix": []
        },
        "strategy": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs"
          ],
          "key": "strategy",
          "description": "Use `strategy` to use a matrix strategy for your jobs. A matrix strategy lets you use variables in a single job definition to automatically create multiple job runs that are based on the combinations of the variables. ",
          "properties": {
            "fail-fast": {
              "type": "boolean",
              "required": false,
              "description": "Setting `fail-fast` to `false` prevents GitHub from canceling all in-progress jobs if any matrix job fails. Default: `true`"
            },
            "max-parallel": {
              "type": "number",
              "required": false,
              "description": "The maximum number of jobs that can run simultaneously when using a matrix job strategy. By default, GitHub will maximize the number of jobs run in parallel depending on runner availability."
            },
            "matrix": {
              "type": "matrix",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "matrix": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "matrix",
          "description": "Use `matrix` to define a matrix of different job configurations. Within your matrix, define one or more variables followed by an array of values.",
          "properties": {
            "include": {
              "type": "matrix-filter",
              "required": false,
              "description": "Use `include` to expand existing matrix configurations or to add new configurations. The value of `include` is a list of objects.\n\nFor each object in the `include` list, the key:value pairs in the object will be added to each of the matrix combinations if none of the key:value pairs overwrite any of the original matrix values. If the object cannot be added to any of the matrix combinations, a new matrix combination will be created instead. Note that the original matrix values will not be overwritten, but added matrix values can be overwritten."
            },
            "exclude": {
              "type": "matrix-filter",
              "required": false,
              "description": "To remove specific configurations defined in the matrix, use `exclude`. An excluded configuration only has to be a partial match for it to be excluded."
            }
          },
          "looseKeyType": "non-empty-string",
          "looseValueType": "sequence"
        },
        "matrix-filter": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "matrix-filter",
          "itemType": "matrix-filter-item"
        },
        "matrix-filter-item": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "matrix-filter-item",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "any"
        },
        "runs-on": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "runs-on",
          "description": "Use `runs-on` to define the type of machine to run the job on.\n* The destination machine can be either a GitHub-hosted runner, larger runner, or a self-hosted runner.\n* You can target runners based on the labels assigned to them, or their group membership, or a combination of these.\n* You can provide `runs-on` as a single string or as an array of strings.\n* If you specify an array of strings, your workflow will execute on any runner that matches all of the specified `runs-on` values.\n* If you would like to run your workflow on multiple machines, use `jobs.<job_id>.strategy`.",
          "oneOf": [
            "non-empty-string",
            "sequence-of-non-empty-string",
            "runs-on-mapping"
          ],
          "oneOfPrefix": []
        },
        "runs-on-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "runs-on-mapping",
          "properties": {
            "group": {
              "type": "non-empty-string",
              "required": false,
              "description": "The group from which to select a runner."
            },
            "labels": {
              "type": "runs-on-labels",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "runs-on-labels": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "runs-on-labels",
          "description": "The label by which to filter for available runners.",
          "oneOf": [
            "non-empty-string",
            "sequence-of-non-empty-string"
          ],
          "oneOfPrefix": []
        },
        "job-env": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets"
          ],
          "key": "job-env",
          "description": "A map of variables that are available to all steps in the job.",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "string"
        },
        "workflow-concurrency": {
          "readerContext": [
            "github",
            "inputs",
            "vars"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars"
          ],
          "key": "workflow-concurrency",
          "description": "Concurrency ensures that only a single job or workflow using the same concurrency group will run at a time. A concurrency group can be any string or expression.\n\nYou can also specify `concurrency` at the job level.\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#concurrency)",
          "oneOf": [
            "string",
            "concurrency-mapping"
          ],
          "oneOfPrefix": []
        },
        "job-concurrency": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "job-concurrency",
          "description": "Concurrency ensures that only a single job using the same concurrency group will run at a time. A concurrency group can be any string or expression. The expression can use any context except for the `secrets` context.\n\nYou can also specify `concurrency` at the workflow level.",
          "oneOf": [
            "non-empty-string",
            "concurrency-mapping"
          ],
          "oneOfPrefix": []
        },
        "concurrency-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "concurrency-mapping",
          "description": "Concurrency ensures that only a single job or workflow using the same concurrency group will run at a time. A concurrency group can be any string or expression.\n\nYou can also specify `concurrency` at the job level.\n\n[Documentation](https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#concurrency)",
          "properties": {
            "group": {
              "type": "non-empty-string",
              "required": true,
              "description": "When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress, the queued job or workflow will be `pending`. Any previously pending job or workflow in the concurrency group will be canceled. To also cancel any currently running job or workflow in the same concurrency group, specify `cancel-in-progress: true`."
            },
            "cancel-in-progress": {
              "type": "boolean",
              "required": false,
              "description": "To cancel any currently running job or workflow in the same concurrency group, specify cancel-in-progress: true."
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "job-environment": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "job-environment",
          "description": "The environment that the job references. All environment protection rules must pass before a job referencing the environment is sent to a runner.",
          "oneOf": [
            "string",
            "job-environment-mapping"
          ],
          "oneOfPrefix": []
        },
        "job-environment-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "job-environment-mapping",
          "properties": {
            "name": {
              "type": "job-environment-name",
              "required": true
            },
            "url": {
              "type": "string-runner-context-no-secrets",
              "required": false,
              "description": "The environment URL, which maps to `environment_url` in the deployments API."
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "job-environment-name": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "job-environment-name",
          "description": "The name of the environment used by the job.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "job-defaults": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "job-defaults",
          "description": "A map of default settings that will apply to all steps in the job. You can also set default settings for the entire workflow.",
          "properties": {
            "run": {
              "type": "job-defaults-run",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "job-defaults-run": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "strategy",
            "matrix",
            "needs",
            "env"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "strategy",
            "matrix",
            "needs",
            "env"
          ],
          "key": "job-defaults-run",
          "properties": {
            "shell": {
              "type": "shell",
              "required": false
            },
            "working-directory": {
              "type": "working-directory",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "job-outputs": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "job-outputs",
          "description": "A map of outputs for a called workflow. Called workflow outputs are available to all downstream jobs in the caller workflow. Each output has an identifier, an optional `description,` and a `value`. The `value` must be set to the value of an output from a job within the called workflow.",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "string-runner-context"
        },
        "steps": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "steps",
          "description": "A job contains a sequence of tasks called `steps`. Steps can run commands, run setup tasks, or run an action in your repository, a public repository, or an action published in a Docker registry. Not all steps run actions, but all actions run as a step. Each step runs in its own process in the runner environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job. Must contain either `uses` or `run`.",
          "itemType": "steps-item"
        },
        "steps-item": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "steps-item",
          "oneOf": [
            "run-step",
            "regular-step"
          ],
          "oneOfPrefix": []
        },
        "run-step": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "run-step",
          "properties": {
            "name": {
              "type": "step-name",
              "required": false
            },
            "id": {
              "type": "step-id",
              "required": false
            },
            "if": {
              "type": "step-if",
              "required": false
            },
            "timeout-minutes": {
              "type": "step-timeout-minutes",
              "required": false
            },
            "run": {
              "type": "string-steps-context",
              "required": true,
              "description": "Runs command-line programs using the operating system's shell. If you do not provide a `name`, the step name will default to the text specified in the `run` command. Commands run using non-login shells by default. You can choose a different shell and customize the shell used to run commands. Each `run` keyword represents a new process and shell in the virtual environment. When you provide multi-line commands, each line runs in the same shell."
            },
            "continue-on-error": {
              "type": "step-continue-on-error",
              "required": false
            },
            "env": {
              "type": "step-env",
              "required": false
            },
            "working-directory": {
              "type": "string-steps-context",
              "required": false
            },
            "shell": {
              "type": "shell",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "regular-step": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "regular-step",
          "properties": {
            "name": {
              "type": "step-name",
              "required": false
            },
            "id": {
              "type": "step-id",
              "required": false
            },
            "if": {
              "type": "step-if",
              "required": false
            },
            "continue-on-error": {
              "type": "step-continue-on-error",
              "required": false
            },
            "timeout-minutes": {
              "type": "step-timeout-minutes",
              "required": false
            },
            "uses": {
              "type": "step-uses",
              "required": true
            },
            "with": {
              "type": "step-with",
              "required": false
            },
            "env": {
              "type": "step-env",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "step-uses": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "step-uses",
          "description": "Selects an action to run as part of a step in your job. An action is a reusable unit of code. You can use an action defined in the same repository as the workflow, a public repository, or in a published Docker container image.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        },
        "step-continue-on-error": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles()"
          ],
          "key": "step-continue-on-error",
          "description": "Prevents a job from failing when a step fails. Set to `true` to allow a job to pass when this step fails."
        },
        "step-id": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "step-id",
          "description": "A unique identifier for the step. You can use the `id` to reference the step in contexts.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        },
        "step-if": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "steps",
            "job",
            "runner",
            "env",
            "always(0,0)",
            "failure(0,0)",
            "cancelled(0,0)",
            "success(0,0)",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "steps",
            "job",
            "runner",
            "env",
            "always()",
            "failure()",
            "cancelled()",
            "success()",
            "hashFiles()"
          ],
          "key": "step-if",
          "description": "Use the `if` conditional to prevent a step from running unless a condition is met. Any supported context and expression can be used to create a conditional. Expressions in an `if` conditional do not require the bracketed expression syntax. When you use expressions in an `if` conditional, you may omit the expression syntax because GitHub automatically evaluates the `if` conditional as an expression.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": true
        },
        "step-if-result": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "strategy",
            "matrix",
            "steps",
            "job",
            "runner",
            "env",
            "always(0,0)",
            "failure(0,0)",
            "cancelled(0,0)",
            "success(0,0)",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "strategy",
            "matrix",
            "steps",
            "job",
            "runner",
            "env",
            "always()",
            "failure()",
            "cancelled()",
            "success()",
            "hashFiles()"
          ],
          "key": "step-if-result",
          "oneOf": [
            "null",
            "boolean",
            "number",
            "string",
            "sequence",
            "mapping"
          ],
          "oneOfPrefix": []
        },
        "step-env": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles()"
          ],
          "key": "step-env",
          "description": "Sets variables for steps to use in the runner environment. You can also set variables for the entire workflow or a job.",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "string"
        },
        "step-name": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles()"
          ],
          "key": "step-name",
          "description": "A name for your step to display on GitHub.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "step-timeout-minutes": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles()"
          ],
          "key": "step-timeout-minutes",
          "description": "The maximum number of minutes to run the step before killing the process."
        },
        "step-with": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles()"
          ],
          "key": "step-with",
          "description": "A map of the input parameters defined by the action. Each input parameter is a key/value pair. Input parameters are set as variables. When you specify an input in a workflow file or use a default input value, GitHub creates a variable for the input with the name `INPUT_<VARIABLE_NAME>`. The variable created converts input names to uppercase letters and replaces spaces with `_`.",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "string"
        },
        "container": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "container",
          "description": "A container to run any steps in a job that don't already specify a container. If you have steps that use both script and container actions, the container actions will run as sibling containers on the same network with the same volume mounts.\n\nIf you do not set a container, all steps will run directly on the host specified by runs-on unless a step refers to an action configured to run in a container.",
          "oneOf": [
            "string",
            "container-mapping"
          ],
          "oneOfPrefix": []
        },
        "container-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "container-mapping",
          "properties": {
            "image": {
              "type": "non-empty-string",
              "required": false,
              "description": "Use `jobs.<job_id>.container.image` to define the Docker image to use as the container to run the action. The value can be the Docker Hub image or a registry name."
            },
            "options": {
              "type": "non-empty-string",
              "required": false,
              "description": "Use `jobs.<job_id>.container.options` to configure additional Docker container resource options."
            },
            "env": {
              "type": "container-env",
              "required": false
            },
            "ports": {
              "type": "sequence-of-non-empty-string",
              "required": false,
              "description": "Use `jobs.<job_id>.container.ports` to set an array of ports to expose on the container."
            },
            "volumes": {
              "type": "sequence-of-non-empty-string",
              "required": false,
              "description": "Use `jobs.<job_id>.container.volumes` to set an array of volumes for the container to use. You can use volumes to share data between services or other steps in a job. You can specify named Docker volumes, anonymous Docker volumes, or bind mounts on the host."
            },
            "credentials": {
              "type": "container-registry-credentials",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "services": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "services",
          "description": "Additional containers to host services for a job in a workflow. These are useful for creating databases or cache services like redis. The runner on the virtual machine will automatically create a network and manage the life cycle of the service containers. When you use a service container for a job or your step uses container actions, you don't need to set port information to access the service. Docker automatically exposes all ports between containers on the same network. When both the job and the action run in a container, you can directly reference the container by its hostname. The hostname is automatically mapped to the service name. When a step does not use a container action, you must access the service using localhost and bind the ports.",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "services-container"
        },
        "services-container": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "services-container",
          "oneOf": [
            "non-empty-string",
            "container-mapping"
          ],
          "oneOfPrefix": []
        },
        "container-registry-credentials": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "secrets",
            "env"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "secrets",
            "env"
          ],
          "key": "container-registry-credentials",
          "description": "If the image's container registry requires authentication to pull the image, you can use `jobs.<job_id>.container.credentials` to set a map of the username and password. The credentials are the same values that you would provide to the `docker login` command.",
          "properties": {
            "username": {
              "type": "non-empty-string",
              "required": false
            },
            "password": {
              "type": "non-empty-string",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "container-env": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "container-env",
          "description": "Use `jobs.<job_id>.container.env` to set a map of variables in the container.",
          "properties": {},
          "looseKeyType": "non-empty-string",
          "looseValueType": "string-runner-context"
        },
        "non-empty-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "non-empty-string",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        },
        "sequence-of-non-empty-string": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "sequence-of-non-empty-string",
          "itemType": "non-empty-string"
        },
        "boolean-needs-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs"
          ],
          "key": "boolean-needs-context"
        },
        "number-needs-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs"
          ],
          "key": "number-needs-context"
        },
        "string-needs-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs"
          ],
          "key": "string-needs-context",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "scalar-needs-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "scalar-needs-context",
          "oneOf": [
            "string",
            "boolean",
            "number"
          ],
          "oneOfPrefix": []
        },
        "scalar-needs-context-with-secrets": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "secrets",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "secrets",
            "strategy",
            "matrix"
          ],
          "key": "scalar-needs-context-with-secrets",
          "oneOf": [
            "string",
            "boolean",
            "number"
          ],
          "oneOfPrefix": []
        },
        "boolean-strategy-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "boolean-strategy-context"
        },
        "number-strategy-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "number-strategy-context"
        },
        "string-strategy-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix"
          ],
          "key": "string-strategy-context",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "boolean-steps-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles()"
          ],
          "key": "boolean-steps-context"
        },
        "number-steps-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles()"
          ],
          "key": "number-steps-context"
        },
        "string-runner-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env"
          ],
          "key": "string-runner-context",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "string-runner-context-no-secrets": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "steps",
            "job",
            "runner",
            "env"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "steps",
            "job",
            "runner",
            "env"
          ],
          "key": "string-runner-context-no-secrets",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "string-steps-context": {
          "readerContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles(1,255)"
          ],
          "evaluatorContext": [
            "github",
            "inputs",
            "vars",
            "needs",
            "strategy",
            "matrix",
            "secrets",
            "steps",
            "job",
            "runner",
            "env",
            "hashFiles()"
          ],
          "key": "string-steps-context",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": false,
          "isExpression": false
        },
        "shell": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "shell",
          "description": "Use `shell` to override the default shell settings in the runner's operating system. You can use built-in shell keywords, or you can define a custom set of shell options. The shell command that is run internally executes a temporary file that contains the commands specified in `run`.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        },
        "working-directory": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "working-directory",
          "description": "The `working-directory` keyword specifies the working directory where the command is run.",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        },
        "cron-mapping": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "cron-mapping",
          "properties": {
            "cron": {
              "type": "cron-pattern",
              "required": false
            }
          },
          "looseKeyType": "",
          "looseValueType": ""
        },
        "cron-pattern": {
          "readerContext": [],
          "evaluatorContext": [],
          "key": "cron-pattern",
          "constant": "",
          "ignoreCase": false,
          "requireNonEmpty": true,
          "isExpression": false
        }
      },
      "version": "workflow-v1.0"
    },
    "trace": {}
  }
}